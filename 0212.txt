1.자료구조의 ADT 정의/ 2.ADT 구현 / 3.활용


연결 리스트 
데이터 동적할당으로 필요할 때 마다 인덱스의 메모리를 생성해서
생성한 메모리가 다음 메모리의 주소를 가리켜 순차적인 나열 형성
(단 입력한 순서대로 순서를 유지할 필요는 없다! 그런 자료구조가 아님)

구조체로 하나의 블록 형성 : 1.데이터 2.다음을 가리킬 포인터변수 3.typedef node * node;

리스트 구성요소 : 첫 번째 블럭(HEAD), 순차적으로 볼 화살표 (CURRENT), 마지막을 가리킬 블럭 = 다음블럭이 NULL(TAIL)

연결 리스트 ADT
-리스트 생성 ListInit : 초기화할 리스트의 주소값 리턴
??-블록생성 : 동적 메모리 할당으로 주소값 return
-순차적 삽입 Linsert: (리스트 간접참조,삽입할 데이터) : 데이터 입력, tail설정
-Lhead:head로 (리스트 간접참조, 데이터 저장주소) : 저장주소에다가 head 다음것 즉 첫 번째 주소값 보내기,
-Lnext순차적 탐색(리스트 간접참조,받을블록) : 받을 블록의 데이터를 확인
??-L데이터 추가(리스트 간접참조,추가할 블록) : 위치 확인->head tail else , 앞뒤의 화살표 수정?
-LRemove데이터 삭제(리스트 간접참조,삭제할 데이터가 들어있는 변수) : 순차적 탐색 -> 데이터 있으면 삭제 -> 화살표 조정
-Lcount출력(리스트 간접참조):순차적 탐색 -> 출력

정렬추가?-정렬 기준이 되는 함수를 등록

새 데이터를 무조건 꼬리에 추가하는 것만은 아님.
ㄴ새 데이터를 꼬리에 추가하는 데이터면 tail로 설정하는 추가적인 구문이 필요하다?
ㄴㄴ tail에 넣는 구조는 head노드랑 그 외의 두 가지로 구분해야하는 불편함
ㄴㄴㄴhead->dummy->main 구조로 dummy에 추가하는 방식 사용 -> tail삭제 (맨 처음 넣은게 tail이므로 굳이 구분 필요 x)


